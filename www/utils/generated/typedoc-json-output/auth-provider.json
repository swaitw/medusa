{
	"id": 38494,
	"name": "auth-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 38495,
			"name": "AbstractAuthModuleProvider",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the module's container using the first parameter,\nand the module's options using the second parameter.\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nimport { AbstractAuthModuleProvider } from \"@medusajs/framework/utils\"\nimport { Logger } from \"@medusajs/framework/types\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  static identifier = \"my-auth\"\n  protected logger_: Logger\n  protected options_: Options\n  // assuming you're initializing a client\n  protected client\n\n  constructor (\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    super(...arguments)\n\n    this.logger_ = logger\n    this.options_ = options\n\n    // assuming you're initializing a client\n    this.client = new Client(options)\n  }\n\n  // ...\n}\n\nexport default MyAuthProviderService\n```"
					}
				]
			},
			"children": [
				{
					"id": 38496,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Every auth provider must have an "
							},
							{
								"kind": "code",
								"text": "`identifier`"
							},
							{
								"kind": "text",
								"text": " static property. The provider's ID\nwill be stored as "
							},
							{
								"kind": "code",
								"text": "`au_{identifier}_{id}`"
							},
							{
								"kind": "text",
								"text": ", where "
							},
							{
								"kind": "code",
								"text": "`{id}`"
							},
							{
								"kind": "text",
								"text": " is the provider's "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": " \nproperty in the "
							},
							{
								"kind": "code",
								"text": "`medusa-config.ts`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  static identifier = \"my-auth\"\n  // ...\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 68,
							"character": 9,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L68"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38497,
					"name": "DISPLAY_NAME",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This property indicates the name used when displaying the provider on a frontend application."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  static DISPLAY_NAME = \"My Auth\"\n  // ...\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 79,
							"character": 9,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L79"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 38498,
					"name": "validateOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 129,
							"character": 9,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L129"
						}
					],
					"signatures": [
						{
							"id": 38499,
							"name": "validateOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the options of the provider set in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ".\nImplementing this method is optional. It's useful if your provider requires custom validation.\n\nIf the options aren't valid, throw an error."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  static validateOptions(options: Record<any, any>) {\n    if (!options.apiKey) {\n      throw new MedusaError(\n        MedusaError.Types.INVALID_DATA,\n        \"API key is required in the provider's options.\"\n      )\n    }\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-auth-provider.ts",
									"line": 129,
									"character": 9,
									"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L129"
								}
							],
							"parameters": [
								{
									"id": 38500,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The provider's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 38501,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 38502,
							"name": "AbstractAuthModuleProvider",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 38495,
								"name": "AbstractAuthModuleProvider",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38510,
					"name": "authenticate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 227,
							"character": 11,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L227"
						}
					],
					"signatures": [
						{
							"id": 38511,
							"name": "authenticate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method authenticates the user.\n\nThe authentication happens either by directly authenticating or returning a redirect URL to continue\nthe authentication with a third party provider.\n\nRelated Read: [Learn about the different authentication flows in Medusa](https://docs.medusajs.com/resources/commerce-modules/auth/authentication-route)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The authentication response."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, if your authentication provider doesn't require validating a callback:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AuthIdentityProviderService,\n  AuthenticationInput,\n  AuthenticationResponse\n} from \"@medusajs/framework/types\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async authenticate(\n    data: AuthenticationInput,\n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    const isAuthenticated = false\n    // TODO perform custom logic to authenticate the user\n    // for example, verifying a password\n\n    if (!isAuthenticated) {\n      // if the authentication didn't succeed, return\n      // an object of the following format\n      return {\n        success: false,\n        error: \"Incorrect credentials\"\n      }\n    }\n\n    // authentication is successful, retrieve the identity\n    const authIdentity = await authIdentityProviderService.retrieve({\n      entity_id: data.body.email, // email or some ID\n      provider: this.provider\n    })\n\n    return {\n      success: true,\n      authIdentity\n    }\n  }\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIf your authentication provider requires validating callback:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AuthIdentityProviderService,\n  AuthenticationInput,\n  AuthenticationResponse\n} from \"@medusajs/framework/types\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async authenticate(\n    data: AuthenticationInput,\n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    const isAuthenticated = false\n    // TODO perform custom logic to authenticate the user\n    // ...\n\n    if (!isAuthenticated) {\n      // if the authentication didn't succeed, return\n      // an object of the following format\n      return {\n        success: false,\n        error: \"Incorrect credentials\"\n      }\n    }\n\n    return {\n      success: true,\n      location: \"some-url.com\"\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-auth-provider.ts",
									"line": 227,
									"character": 11,
									"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L227"
								}
							],
							"parameters": [
								{
									"id": 38512,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the authentication request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationInput"
										},
										"name": "AuthenticationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 38513,
									"name": "authIdentityProviderService",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The service used to retrieve or\ncreate an auth identity. It has two methods: "
											},
											{
												"kind": "code",
												"text": "`create`"
											},
											{
												"kind": "text",
												"text": " to create an auth identity,\nand "
											},
											{
												"kind": "code",
												"text": "`retrieve`"
											},
											{
												"kind": "text",
												"text": " to retrieve an auth identity. When you authenticate the user, you can create an auth identity\nusing this service."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
											"qualifiedName": "AuthIdentityProviderService"
										},
										"name": "AuthIdentityProviderService",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationResponse"
										},
										"name": "AuthenticationResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAuthProvider.authenticate"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAuthProvider.authenticate"
					}
				},
				{
					"id": 38514,
					"name": "register",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 296,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L296"
						}
					],
					"signatures": [
						{
							"id": 38515,
							"name": "register",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method receives credentails to create a new auth identity. It performs any validation necessary\nbefore creating the auth identity.\n\nFor example, in the "
									},
									{
										"kind": "code",
										"text": "`emailpass`"
									},
									{
										"kind": "text",
										"text": " provider, this method ensures that the provided email doesn't exist\nbefore creating the auth identity.\n\nThis method is only used in a basic authentication flow, such as when using an email and password\nto register and authenticate a user.\n\nRelated Read: [Learn about the different authentication flows in Medusa](https://docs.medusajs.com/resources/commerce-modules/auth/authentication-route)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created authentication identity if no errors occur."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AuthIdentityProviderService,\n  AuthenticationInput,\n  AuthenticationResponse\n} from \"@medusajs/framework/types\"\nimport { MedusaError } from \"@medusajs/framework/utils\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async register(\n    data: AuthenticationInput,\n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    try {\n      await authIdentityService.retrieve({\n        entity_id: data.body.email, // email or some ID\n      })\n\n      return {\n        success: false,\n        error: \"Identity with email already exists\",\n      }\n    } catch (error) {\n      if (error.type === MedusaError.Types.NOT_FOUND) {\n        const createdAuthIdentity = await authIdentityProviderService.create({\n          entity_id: data.body.email, // email or some ID\n          provider: this.provider,\n          provider_metadata: {\n            // can include password or any other relevant information\n          }\n        })\n\n        return {\n          success: true,\n          authIdentity: createdAuthIdentity,\n        }\n      }\n\n      return { success: false, error: error.message }\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-auth-provider.ts",
									"line": 296,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L296"
								}
							],
							"parameters": [
								{
									"id": 38516,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the authentication request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationInput"
										},
										"name": "AuthenticationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 38517,
									"name": "authIdentityProviderService",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The service used to retrieve or\ncreate an auth identity. It has two methods: "
											},
											{
												"kind": "code",
												"text": "`create`"
											},
											{
												"kind": "text",
												"text": " to create an auth identity,\nand "
											},
											{
												"kind": "code",
												"text": "`retrieve`"
											},
											{
												"kind": "text",
												"text": " to retrieve an auth identity. When you authenticate the user, you can create an auth identity\nusing this service."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
											"qualifiedName": "AuthIdentityProviderService"
										},
										"name": "AuthIdentityProviderService",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationResponse"
										},
										"name": "AuthenticationResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAuthProvider.register"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAuthProvider.register"
					}
				},
				{
					"id": 38518,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 348,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L348"
						}
					],
					"signatures": [
						{
							"id": 38519,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update an auth identity's details.\n\nFor example, the "
									},
									{
										"kind": "code",
										"text": "`emailpass`"
									},
									{
										"kind": "text",
										"text": " provider's implementation of this method updates a user's password."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The updated authentication identity if no errors occur."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AuthIdentityProviderService,\n  AuthenticationInput,\n  AuthenticationResponse\n} from \"@medusajs/framework/types\"\nimport { MedusaError } from \"@medusajs/framework/utils\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async update(\n    data: Record<string, unknown>,\n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    try {\n      const authIdentity = await authIdentityService.update(\n        data.email, // email or some ID used to identify the auth identity\n        {\n          user: data.user // example\n        }\n      )\n\n      return { success: true, authIdentity }\n    } catch (error) {\n      return { success: false, error: error.message }\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-auth-provider.ts",
									"line": 348,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L348"
								}
							],
							"parameters": [
								{
									"id": 38520,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Data relevant to identify the auth identity and what to update in it. For example,\nthe "
											},
											{
												"kind": "code",
												"text": "`emailpass`"
											},
											{
												"kind": "text",
												"text": " provider expects in this object an "
											},
											{
												"kind": "code",
												"text": "`email`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`password`"
											},
											{
												"kind": "text",
												"text": " properties."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 38521,
									"name": "authIdentityProviderService",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The service used to retrieve or\ncreate an auth identity. It has two methods: "
											},
											{
												"kind": "code",
												"text": "`create`"
											},
											{
												"kind": "text",
												"text": " to create an auth identity,\nand "
											},
											{
												"kind": "code",
												"text": "`retrieve`"
											},
											{
												"kind": "text",
												"text": " to retrieve an auth identity. When you authenticate the user, you can create an auth identity\nusing this service."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
											"qualifiedName": "AuthIdentityProviderService"
										},
										"name": "AuthIdentityProviderService",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationResponse"
										},
										"name": "AuthenticationResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAuthProvider.update"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAuthProvider.update"
					}
				},
				{
					"id": 38522,
					"name": "validateCallback",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "abstract-auth-provider.ts",
							"line": 441,
							"character": 2,
							"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L441"
						}
					],
					"signatures": [
						{
							"id": 38523,
							"name": "validateCallback",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the callback of an authentication request.\n\nIn an authentication flow that requires performing an action with a third-party service, such as login\nwith a social account, the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "authenticate",
										"target": 38510
									},
									{
										"kind": "text",
										"text": " method is called first.\n\nThen, the third-party service redirects to a frontend URL passing it a "
									},
									{
										"kind": "code",
										"text": "`code`"
									},
									{
										"kind": "text",
										"text": " query parameter.\nThe frontend should then send a request to the Medusa application's validate callback API route, passing it the code.\nThat route uses this method to verify the callback's code.\n\nIf the callback is verified successfully, the provider creates an auth identity for the user, or updates the auth identity's user information.\n\nIn the auth identity, use the following properties to store additional data:\n\n- "
									},
									{
										"kind": "code",
										"text": "`provider_metadata`"
									},
									{
										"kind": "text",
										"text": ": Store metadata useful for the provider, such as a password hash.\n- "
									},
									{
										"kind": "code",
										"text": "`user_metadata`"
									},
									{
										"kind": "text",
										"text": ": Store metadata of the user's details. For example, if the third-party service returns the user's information such as email\nor name, you store this data in this property.\n\nRelated Guide: [Learn about the different authentication flows in Medusa](https://docs.medusajs.com/resources/commerce-modules/auth/authentication-route)."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The authentication response."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  AuthIdentityProviderService,\n  AuthenticationInput,\n  AuthenticationResponse\n} from \"@medusajs/framework/types\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async validateCallback(\n    data: AuthenticationInput,\n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    const isAuthenticated = false\n    // TODO perform custom logic to authenticate the user\n    // ...\n\n    if (!isAuthenticated) {\n      // if the authentication didn't succeed, return\n      // an object of the following format\n      return {\n        success: false,\n        error: \"Something went wrong\"\n      }\n    }\n\n    // authentication is successful, create an auth identity\n    // if doesn't exist\n    let authIdentity\n\n    try {\n      authIdentity = await authIdentityProviderService.retrieve({\n        entity_id: data.body.email, // email or some ID\n        provider: this.provider\n      })\n    } catch (e) {\n      // The auth identity doesn't exist so create it\n      authIdentity = await authIdentityProviderService.create({\n        entity_id: data.body.email, // email or some ID\n        provider: this.provider,\n        provider_metadata: {\n          // can include password or any other relevant information\n        },\n        user_metadata: {\n          // can include data retrieved from the third-party service\n        }\n      })\n    }\n\n    return {\n      success: true,\n      authIdentity\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-auth-provider.ts",
									"line": 441,
									"character": 2,
									"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L441"
								}
							],
							"parameters": [
								{
									"id": 38524,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the authentication request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationInput"
										},
										"name": "AuthenticationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 38525,
									"name": "authIdentityProviderService",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The service used to retrieve or\ncreate an auth identity. It has two methods: "
											},
											{
												"kind": "code",
												"text": "`create`"
											},
											{
												"kind": "text",
												"text": " to create an auth identity,\nand "
											},
											{
												"kind": "code",
												"text": "`retrieve`"
											},
											{
												"kind": "text",
												"text": " to retrieve an auth identity. When you authenticate the user, you can create an auth identity\nusing this service."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
											"qualifiedName": "AuthIdentityProviderService"
										},
										"name": "AuthIdentityProviderService",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationResponse"
										},
										"name": "AuthenticationResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAuthProvider.validateCallback"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAuthProvider.validateCallback"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						38501
					]
				},
				{
					"title": "Properties",
					"children": [
						38496,
						38497
					]
				},
				{
					"title": "Methods",
					"children": [
						38498,
						38510,
						38514,
						38518,
						38522
					]
				}
			],
			"sources": [
				{
					"fileName": "abstract-auth-provider.ts",
					"line": 56,
					"character": 22,
					"url": "https://github.com/medusajs/medusa/blob/f00e6bf660ab96b9d41bc3d424c8d78c54eaa8e7/packages/core/utils/src/auth/abstract-auth-provider.ts#L56"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
						"qualifiedName": "IAuthProvider"
					},
					"name": "IAuthProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				38495
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"38494": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": ""
		},
		"38495": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider"
		},
		"38496": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.identifier"
		},
		"38497": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.DISPLAY_NAME"
		},
		"38498": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.validateOptions"
		},
		"38499": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.validateOptions"
		},
		"38500": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "options"
		},
		"38510": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.authenticate"
		},
		"38511": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.authenticate"
		},
		"38512": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "data"
		},
		"38513": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "authIdentityProviderService"
		},
		"38514": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.register"
		},
		"38515": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.register"
		},
		"38516": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "data"
		},
		"38517": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "authIdentityProviderService"
		},
		"38518": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.update"
		},
		"38519": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.update"
		},
		"38520": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "data"
		},
		"38521": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "authIdentityProviderService"
		},
		"38522": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.validateCallback"
		},
		"38523": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.validateCallback"
		},
		"38524": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "data"
		},
		"38525": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "authIdentityProviderService"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts"
		},
		"reflections": {
			"1": 38494
		}
	}
}
